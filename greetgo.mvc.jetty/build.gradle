def nowDate = new Date()
def nowFormattedDate = nowDate.format("yyyy-MM-dd/HH:mm:ss")

eclipse {
  jdt {
    //
    // if you want to alter the java versions (by default they are configured with
    // gradle java plugin settings):
    //
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
  }
}

configurations { repoUpload }

dependencies {
  compile project(':greetgo.mvc')
  compile project(':greetgo.mvc.war')

  //ext.jettyServerVersion = "9.3.7.RC1" //for 8
//ext.jettyServerVersion = "9.3.4.RC1" // for 8
  //ext.jettyServerVersion = "9.3.3.v20150827" // for 8
  ext.jettyServerVersion = "9.3.0.RC0" // for 7
  //ext.jettyServerVersion = "9.2.14.v20151106" // for 7
  //ext.jettyServerVersion = "9.0.0.RC0" // for 7

  compile "org.eclipse.jetty:jetty-server:${jettyServerVersion}"
  compile "org.eclipse.jetty:jetty-servlet:${jettyServerVersion}"
  compile "org.eclipse.jetty:jetty-webapp:${jettyServerVersion}"

  testCompile 'org.apache.tomcat:jasper:6.0.32'

  testCompile "kz.greetgo:greetgo.util:${greetgoUtilVersion}"

  //testCompile 'javax.servlet.jsp:jsp-api:2.2.1-b03'

  //compile "org.apache.cxf:cxf-rt-frontend-jaxws:3.0.0-SNAPSHOT"
  compile 'org.apache.cxf:cxf-rt-transports-http:3.1.4'
  compile 'org.apache.cxf:cxf-rt-frontend-jaxws:3.1.4'

  //compile 'org.apache.cxf:cxf-api:2.7.18'


}

test { useTestNG() }

task javadocJar(type: Jar, dependsOn: 'javadoc') {
  from javadoc.destinationDir
  classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

uploadArchives {
  repositories.mavenDeployer {
    configuration = configurations.archives
    repository(
      url: System.getenv('GG_REPO')
    )

    pom.project {
      name project.name
      packaging 'jar'
    }
  }
}


if (System.getenv('LIB_SIGN_GPG_KEY_ID') != null && System.getenv('LIB_SIGN_GPG_KEY_ID').length() > 0) {

  gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
      allprojects { ext."signing.keyId" = System.getenv('LIB_SIGN_GPG_KEY_ID') }
      allprojects { ext."signing.secretKeyRingFile" = System.getenv('LIB_SIGN_GPG_KEY_LOCATION') }
      allprojects { ext."signing.password" = System.getenv('LIB_SIGN_GPG_KEY_PASSWORD') }
    }
  }
}

signing {
  sign configurations.archives
}

tasks.withType(Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('encoding', 'UTF-8')
  options.addStringOption('charSet', 'UTF-8')
}

project.tasks.create('uploadToMavenCentral', Upload.class) {
  group = "upload"
  configuration = configurations.archives
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(
            userName: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_ID'),
            password: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_PASSWORD')
        )
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(
            userName: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_ID'),
            password: System.getenv('LIB_SONATYPE_ACCOUNT_HASH_PASSWORD')
        )
      }

      pom.project {
        name project.name
        packaging 'jar'

        description 'Lightweight implementation of pattern MVC. Idea based on SpringMVC'
        url 'http://tech.greetgo.kz/libs/greetgo/mvc.php'

        scm {
          connection 'scm:git:https://github.com/greetgo/mvc'
          developerConnection 'scm:git:https://github.com/greetgo/mvc'
          url 'https://github.com/greetgo/mvc'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'greetgo'
            name 'Yevgeniy Kolpakov'
            email 'tech@greet-go.com'
          }
        }
      }
    }
  }
}
